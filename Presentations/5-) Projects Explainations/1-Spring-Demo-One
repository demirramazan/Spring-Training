1-BaseballCoach classimiz olusturuyoruz ilk olarak.
2-Sonrasi basit bir olusturuyoruz getDailyWorkout() seklinde. Spring return etsin.
3-MyApp adinda bir main class olusturalim. Main method kutucugunu isaretlemek isimizi kolaylistirir.
4-Sonrasinda bir nesne olusturalim BaseballCoach sinifindan ve bu nesne ile getDailyWorkout methodumuzu cagiralim.
	BaseballCoach theCoachNesnesi = new BaseballCoach();
5-Bu islem butun trainerlar tarafindan yapilacagindan bir tane Coach adinda bir interface olusturup icine getDailyWorkout(); imzasini ekliyelim.
6-Bu islemden sonra BaseballCoach classimiz Coach interface'inden implement edilsin. Dolayisiyla methodumuzun basina da @override anatasyonunu ekliyelim.
7-Sonra MyApp classimizda 
	Coach theCoachNesnesi = new BaseballCoach();
		seklinde yaparak generic interface uzerinden theCoachNesnesi'ni herhangi bir Coach implementasyonundan getDailyWorkout methoduna 	 	ulasabiliriz.

8-Kodumuzu calistirip bir review yapabiliriz.

=========================================================SECTION 2=======================================================================================

1-Eger BaseballCoach sinifindan degilde baska bir sinifi yazmak isteseydik:
	Coach theCoachNesnesi = new TrackCoach();
2-Alacagimiz hatayi gozden gecirdigimizde IDE bizden yeni bir class olusturmamizi onerecek ve biz kabul edersek 
	TrackCoach adinda Coach Interface'den implement edilmis ve dolayisiyla interface'imizdeki methodlarimizda override edilmis sekilde bir class 	 	olusturacaktir.
3-Baska bir String degerini Return edebiliriz getDailyWorkout Methodunu kullanarak.
4-Bu yontemle istedigimiz trainerden getDailyWorkout methoduna ulasabiliriz.
5-Su anda bu istegimiz gerceklesmis olsada coach classlari configurable sekilde degildir. Yani hardcoded seklindedir. Bu da cok istenilen bir durum 		olmadigindan uygulamamiz tam amacina ulasmamis olsada dogru sekilde calismaktadir.
6-Kodumuzu calistirip bir daha review yapabiliriz.

=========================================================SECTION 3========================================================================================

1-Artik programi configurable yapma zamanimiz geldi ve Spring tam olarak burada devreye giriyor.
2-Bunu yapabilmemiz icin bir configuration file olmasi lazim ve biz burada uygulamizi configure edebilmemiz gerekir.
3-Gorsel eklenecek.
4-Configuring Spring Cotainer uc yol ile yapilabilir:
	*XML konfigurasyon dosyasi ile yapabiliriz. 
	*Java Anatasyonlari ile (Modern)
	*Java Source Code ile	(Modern)
5-Spring ilk ciktiginda XML kullanildigi icin bazi buyuk projeler halen XML konfigurasyon yoluna devam etmektedirler.Source kodumuzda hepsi icin orneklerimiz vardir.

==========================================================SECTION 4=======================================================================================

Adimlarimiz:
	1-Configure your Spring Beans
	2-Create Spring Container
	3-Retrieve beans from Spring Container
Aciklamarimiz:
	1-Bir tane applicationContext.xml file olusturup icerisine bir bean birakacagiz. bean id ve class degiskenlerini icerecek.
	2-Spring Container genellikle ApplicationContext olarak bilinen java classimizdir ve xml file buradan okuruz.
	3-Sonrasinda artik bizim uygulamamiz Spring Object Factory ile konusup xml filedaki konfige gore bize bean getirir.
